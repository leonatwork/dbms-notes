{"version":3,"sources":["components/header.jsx","components/index.jsx","components/notes.jsx","data/notes-object.js","components/content.jsx","components/main.jsx","index.js"],"names":["Header","state","navExpanded","navbarStyle","backgroundColor","navbarTextStyle","color","fontSize","fontFamily","this","props","showNav","Navbar","collapseOnSelect","style","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","notes","map","note","activeNoteID","Link","key","onClick","handleClick","cursor","textAlign","title","Component","Index","Notes","Fragment","content","listStyleType","Content","width","margin","paddingTop","borderRight","Main","showResponsiveNav","setState","currentShowNav","window","innerWidth","addEventListener","resize","bind","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"2QA6DeA,E,4MAxDbC,MAAQ,CAAEC,aAAa,G,uDACb,IAAD,OACDC,EAAc,CAClBC,gBAAiB,WAEbC,EAAkB,CACtBC,MAAO,QACPC,SAAU,OACVC,WAAY,2BAEd,OAAIC,KAAKC,MAAMC,QAEX,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,MAAOX,EAAaY,OAAO,MAClD,kBAACH,EAAA,EAAOI,MAAR,CACEF,MAAOT,EACPY,KAAK,4CAFP,cAMA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACZd,KAAKC,MAAMc,MAAMC,KAAI,SAACC,GACrB,IAAIH,EAAY,kBAGhB,OAFIG,EAAKL,KAAO,EAAKX,MAAMiB,eACzBJ,GAAa,cAEb,kBAACD,EAAA,EAAIM,KAAL,CACEC,IAAKH,EAAKL,GACVJ,KAAM,IAAMS,EAAKL,GACjBE,UAAWA,EACXO,QAAS,kBAAM,EAAKpB,MAAMqB,YAAYL,EAAKL,KAC3CP,MAAO,CAAEkB,OAAQ,UAAWC,UAAW,WAEtCP,EAAKQ,aAUpB,kBAACtB,EAAA,EAAD,CAAQG,OAAO,KAAKD,MAAOX,GACzB,kBAACS,EAAA,EAAOI,MAAR,CACEC,KAAK,2CACLH,MAAOT,GAFT,mB,GA9Ca8B,aCmBNC,EArBD,SAAC,GAA0C,IAAxCZ,EAAuC,EAAvCA,MAAOG,EAAgC,EAAhCA,aAAcI,EAAkB,EAAlBA,YACpC,OACE,wBAAIR,UAAU,+BACXC,EAAMC,KAAI,SAACC,GACV,IAAIH,EAAY,kBAEhB,OADIG,EAAKL,KAAOM,IAAcJ,GAAa,WAEzC,wBACEM,IAAKH,EAAKL,GACVE,UAAWA,EACXO,QAAS,kBAAMC,EAAYL,EAAKL,KAChCP,MAAO,CAAEkB,OAAQ,YAEhBN,EAAKQ,YCTHG,EAJD,SAAC,GAAc,IAAZX,EAAW,EAAXA,KACf,OAAO,kBAAC,IAAMY,SAAP,KAAiBZ,ICDbF,EAAQ,CACnB,CACEH,GAAI,EACJa,MAAO,eACPK,QACE,6BACE,4CACA,6BACA,2BACE,uCADF,qCAGA,2BACE,iEADF,2EAKA,2BACE,mCADF,2CAGA,2BACE,0CADF,0BAIA,8HAGE,6BAHF,IAGS,kCAHT,yGAMA,6BACA,uDACA,wEACA,4BACE,+CACA,kDACA,iDACA,8CACA,gDACA,iDACA,yDACA,iDAEF,6BACA,8DACA,mEACA,4BACE,2DACA,gDACA,wDACA,uDACA,qDAEF,oEACA,4BACE,wDACA,oDACA,8DACA,wDACA,iEAKR,CACElB,GAAI,EACJa,MAAO,aACPK,QACE,6BACE,0CACA,6BACA,2DAHF,iHAME,6BANF,2BAQE,6BACA,sCACA,sCAVF,yFAYkB,6BAZlB,UAcE,4BACE,4DAC+B,kCAD/B,qBAGA,8DACiC,kCADjC,kBAIF,6BACA,yCACA,0CAxBF,+DA0BE,6BA1BF,mBA4BE,4BACE,6DACA,6DACgC,kCADhC,kCAIA,6CACA,iGACqE,IACnE,kCAFF,cAIA,uCACA,qDACwB,kCADxB,iCAIF,6BACA,4CACA,2CA9CF,+BA+CE,6BA/CF,qBAgDE,4BACE,oCACA,+HAIA,oIAKF,gDA3DF,sEA4DyB,6BA5DzB,yCA8DE,6BACA,6BACA,yDAhEF,gIAkEmB,kCAlEnB,mGAoEE,6BApEF,4DAsEE,6BAtEF,0CAsEgD,IAtEhD,oBAuEE,6BACA,0CACA,0CAzEF,4FA2EE,6BA3EF,sEA6EE,6BACA,6BACA,+CA/EF,2MAmFE,6BACA,6BACA,iDArFF,+FAuFE,6BAvFF,8LA8FJ,CACElB,GAAI,EACJa,MAAO,OACPK,QACE,6BACE,oCACA,6BACA,2BACE,mCADF,iFAIA,6BACE,4CACA,4BACE,4BACE,0CADF,6BAGA,4BACE,8CADF,2MAMA,4BACE,4CADF,2DAIA,4BACE,4CADF,sFAIA,4BACE,8CADF,2GAEiE,IAC/D,2CAHF,KAKA,4BACE,8CADF,iCAGA,4BACE,8CADF,qKAUV,CACElB,GAAI,EACJa,MAAO,0BACPK,QACE,6BACE,uDACA,6BACA,6BACE,oCAAU,IAAV,MACA,iDACqB,gCADrB,2CAEE,iCAFF,KAIA,2BACE,+DACA,gCAFF,kBAGE,iCAHF,KAKA,2BACE,mEACA,gCAFF,wBAGE,iCAHF,KAKA,2BACE,gDADF,wBAC+C,gCAD/C,wGAIE,2BACG,IADH,IAEG,kCAFH,OAMJ,6BACA,6BACE,gDACA,+GAIA,4CACA,4BACE,4BACE,0CACA,0DAAgC,IAAhC,OAEF,4BACE,2CACA,iCACM,IADN,eACuB,IADvB,QAIF,4BACE,2CACA,iCACM,IADN,aACqB,IADrB,cACqC,IADrC,QAKJ,8CACA,4BACE,4BACE,oCACA,iCACM,IADN,aACqB,IADrB,cACqC,IADrC,QAIF,4BACE,4CACA,iCACM,IADN,eACuB,IADvB,aACsC,IADtC,OAIF,4BACE,kDACA,iCACM,IADN,cACsB,IADtB,eACuC,IADvC,QAIF,4BACE,0CACA,iCACM,IADN,aACqB,IADrB,eACsC,IADtC,UAMN,6BACA,6BACE,8CACA,oFACA,oCACA,4BACE,0DACA,kDAEE,4BACE,iEACA,kGAIA,yHAMJ,kDAEE,4BACE,qHAIA,qIAON,yIAQR,CACElB,GAAI,EACJa,MAAO,gBACPK,QACE,6BACE,6CACA,6BACA,2BACE,4CADF,0FAIA,6BACE,gDACA,6BAFF,sFAKE,4BACE,4BACE,gDACA,sOAOF,4BACE,+CACA,2JAEgE,IAC9D,6BACA,kCAJF,mEAQF,4BACE,+CACA,uGAEW,6BACT,mCAHF,qFASN,6BACA,mDACA,6BACE,mCACA,4BACE,6GAIA,8EACA,qEACA,sFAEF,mCACA,4BACE,uDACA,yDAC4B,mDAD5B,0BAEgB,IAFhB,iPAQA,0JAKF,mCACA,4BACE,uDACA,qDACwB,oDADxB,sBAEU,IAFV,qJAOF,qEACA,4BACE,uDACA,qDACyB,IADzB,yEAEwC,IAFxC,gBAIA,0NAIE,6BAJF,oDAME,wBAAIzB,MAAO,CAAE0B,cAAe,SAC1B,6DACA,iEACA,oHAON,mCACA,4BACE,uDACA,wFAC4D,IAD5D,yEAIA,kJAKF,qEACA,4BACE,uDACA,8KAUV,CACEnB,GAAI,EACJa,MAAO,4BACPK,QACE,6BACE,8CAAoB,IAApB,aACA,6BACA,wHAIA,0CACA,4BACE,0FACA,iEACA,oEAEF,4CACA,4BACE,4CACA,iDACA,+DAEF,8CACA,4BACE,iEACA,+HAKF,gDACA,4BACE,+DACA,gFAEF,6BACA,wCACA,gPAKE,6BACA,qEACA,6BAPF,sDASE,6BATF,iFAaA,2BACE,+CADF,wFAGE,6BACA,gDAJF,0FAOA,6BACE,gDACA,4BACE,4BACE,oDACA,4BACE,+CAEE,4BACE,yDACA,oEACA,+CACA,+FAIA,4DAGJ,iDAEE,4BACE,uDACA,8CACA,sEACA,iHAIA,8DAGJ,iDAEE,4BACE,0JAKA,0FAGA,+CAAqB,IAArB,gBACA,4FAOR,4BACE,mDACA,6KAWZ,CACElB,GAAI,EACJa,MAAO,eACPK,QACE,6BACE,4CACA,6BACA,2BACE,2CADF,2KAKA,6BACA,6BACE,2DACA,4BACE,4BACE,wCACA,4BACE,yFAGA,4FAKJ,4BACE,0CACA,4BACE,yHAIA,4BACE,kCADF,8FAIA,8JAOJ,4BACE,wCACA,4BACE,0JAKA,qIAIA,yFAGJ,4BACE,yCACA,4BACE,2GAIA,oFAKR,6BACA,6BACE,kDACA,4BACE,wDACA,mFACA,uEACA,4FAGA,iFACA,oFAEF,qKASR,CACElB,GAAI,EACJa,MAAO,sBACPK,QACE,6BACE,mDACA,6BACA,6BACE,wDACA,4BACE,8CACA,kDACA,yDACA,gDAEF,8IAIA,2DACA,4BACE,4BACE,iDACA,4BACE,6KAKA,4BACE,oCADF,kGAMJ,4BACE,wDACA,4BACE,gMAOJ,4BACE,mDACA,4BACE,+MAOJ,4BACE,yEACA,4BACE,sRAWR,6BACA,6BACE,iDACA,4BACE,4BACE,8CACA,4BACE,4EACA,sDAGJ,4BACE,kDACA,4BACE,wEACA,2DAGJ,4BACE,oDACA,4BACE,8QAOA,wFAGA,kEAEE,4BACE,gFACA,wGAIA,kEACA,+DACA,+DACA,iEAGJ,0EAEE,4BACE,yCAEE,6BAFF,OAGO,IAHP,8CAKA,wFAEE,kCAFF,SAQR,4BACE,mDACA,4BACE,qFACA,2EACA,2FAGA,kHAIA,gKAIE,4BACE,iGAIA,2FAIA,uJASR,4BACE,mDACA,4BACE,iGAIA,8EACA,gKAKA,2BACE,mDADF,yHAOJ,4BACE,mDACA,4BACE,4KAKA,qFACA,+HAMJ,4BACE,8CACA,4BACE,yLAKA,0DAKR,6BACA,6BACE,8DACA,6BACE,4BACE,4BACE,sDACA,6BACE,4BACE,qKAKA,6CACgB,kCADhB,kEAEkC,kCAFlC,4BAKA,sCACS,kCADT,KACwB,IADxB,QACiC,kCADjC,sEAIA,yFAGA,+HAIA,gIAIA,gCACG,kCADH,yBAGA,4BACE,sCACS,kCADT,KACwB,IADxB,gCAGA,sCACS,kCADT,KACwB,IADxB,iBAC0C,kCAD1C,sDAGE,kCAHF,OAMF,wDACA,4BACE,yCACa,IADb,gBAC8B,kCAD9B,kBAGA,yCACa,IADb,gBAC8B,kCAD9B,kBAGA,mDACsB,kCADtB,sDAE4B,kCAF5B,OAKF,mEACA,2EACA,kJAKA,sGAIA,oCACA,8DACA,oHAIA,4BACE,mDADF,8IAKA,2FAEG,kCAFH,4BAEwC,kCAFxC,IAEsD,IAFtD,YAKA,qCACQ,kCADR,wEAE+B,kCAF/B,6CAQN,4BACE,mDACA,6BACE,4BACE,oFAGA,qCACS,IADT,uBACkC,IADlC,WAGA,8CACA,4BACE,4BACE,uDADF,uIAKA,4BACE,0DADF,0HAMF,sJAKA,4BACE,4BACE,8CADF,4CAIA,4BACE,kEACA,4BACE,uGAIA,uGAKF,6EACA,kKAKA,2FAIA,sEACA,4BACE,4BACE,gDAEF,4BACE,2HAIA,gIAIA,kDACA,qFAIA,0HAKF,4BACE,4CAEF,4BACE,0HAIA,kFAGA,sEACA,oEACA,6GAKF,4BACE,0CAEF,4BACE,gEACA,4HAIA,2FAON,4BACE,2CAEF,4BACE,oGAIA,4DAC+B,kCAD/B,IAC6C,IAD7C,IAEE,kCAFF,MAEiB,kCAFjB,wBAGE,kCAHF,KAKA,4FAIA,kEACA,4DACA,4BACE,4BACE,4CACA,4BACE,8CACiB,kCADjB,qCAIA,2GAIA,kEACA,iGAIA,+EAGA,6EAGA,kIAKA,+FAYhB,wDAOZ,CACElB,GAAI,EACJa,MAAO,YACPK,QACE,6BACE,yCACA,6BACA,sDACA,6BACA,6DACA,4BACE,4BACE,mDAEF,4BACE,+EACA,0EACA,sEACA,4BACE,gCACG,kCADH,oBACgC,kCADhC,+BAIA,sCACS,kCADT,KACwB,IADxB,QACiC,kCADjC,MACiD,IADjD,iBAGA,sCACS,kCADT,KACwB,IADxB,QACiC,kCADjC,MACiD,IADjD,KAEE,kCAFF,wBAIA,uIAKF,uDACA,4BACE,+EACA,sCACS,kCADT,KACwB,IADxB,QACiC,kCADjC,MACiD,IADjD,KAEE,kCAFF,cAIA,sCACS,kCADT,KACwB,IADxB,QACiC,kCADjC,MACiD,IADjD,KAEE,kCAFF,mBAKF,6CACA,4BACE,uFACA,4FAKJ,4BACE,uDAGJ,6BACA,2BACE,kCADF,4CAMN,CACElB,GAAI,EACJa,MAAO,MACPK,QACE,6BACE,+DACA,6BACA,6BACE,kCADF,qEAGE,4BACE,sDACA,0DAEF,qCAPF,2BAQE,6BACA,qCATF,6BAUE,6BACA,qCAXF,+BAYE,8BAEF,6BACA,6BACE,oDACA,+CAEE,6BAFF,mBAGE,6BAHF,qBAMF,6BACA,6BACE,mDACA,iDAFF,+DAIE,wCAEE,6BAFF,sBAIE,6BAJF,+BAOA,oCAXF,2CAYE,4BACE,4BACE,2CACA,6BAFF,qEAKA,wCAEE,6BAFF,kCAIE,6BAJF,aAOA,4BACE,8CACA,6BAFF,0CAKA,4BACE,0DACA,wCAEE,6BAFF,sCAKA,uDACA,wCAEE,6BAFF,qDAMF,4BACE,yCACA,6BAFF,0DAIE,4BACE,4BACE,gDADF,4DAIA,4BACE,iDADF,4DAIA,4BACE,gDADF,yCAMN,6DACA,4BACE,wCAEE,6BAFF,WAIE,6BAJF,qCAME,6BANF,aAQE,6BARF,YAWA,+GAIA,yGAIA,+GAMJ,6BACA,6BACE,iDAEA,2DAEE,6BAFF,kBAIE,6BAJF,kBAME,6BANF,yBAQE,6BARF,2BAYF,6BACA,6BACE,6CACA,2BACE,wDACA,6BAFF,wCAIE,6BAJF,gBAME,6BANF,+CAQE,6BARF,0CAWA,2BACE,+CACA,6BAFF,oBAGoB,KAHpB,6CAMF,6BACA,6BACE,6CACA,mDACA,4BACE,wCACA,oCACA,wCACA,iEACA,6EAEF,kCACA,4BACE,qCACA,2EACA,6DAEF,mDACA,4BACE,4DACA,+CACA,iEAEF,qDACA,4BACE,oFACA,kECx3CGE,EAtBC,SAAC,GAA4C,IAA1Cd,EAAyC,EAAzCA,aAAchB,EAA2B,EAA3BA,QAASoB,EAAkB,EAAlBA,YACxC,OACE,yBACER,UAAU,MACVT,MAAO,CAAE4B,MAAO,MAAOC,OAAQ,SAAUC,WAAY,UAEnDjC,GACA,yBAAKY,UAAU,QAAQT,MAAO,CAAE+B,YAAa,mBAC3C,kBAAC,EAAD,CACErB,MAAOA,EACPG,aAAcA,EACdI,YAAaA,KAInB,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAOG,KAAMF,EAAMG,GAAcY,aCwB1BO,E,4MAvCb7C,MAAQ,CAAE8C,mBAAmB,EAAOpB,aAAc,G,EAgBlDI,YAAc,SAACV,GACb,EAAK2B,SAAS,CAAErB,aAAcN,K,uDAf9B,IAAI4B,EAAiBC,OAAOC,WAAa,IACrCF,IAAmBxC,KAAKR,MAAMU,SAChCF,KAAKuC,SAAS,CAAED,kBAAmBE,M,0CAIrCC,OAAOE,iBAAiB,SAAU3C,KAAK4C,OAAOC,KAAK7C,OACnDA,KAAK4C,W,6CAILH,OAAOK,oBAAoB,SAAU9C,KAAK4C,OAAOC,KAAK7C,S,+BAQtD,OACE,6BACE,kBAAC,EAAD,CACEE,QAASF,KAAKR,MAAM8C,kBACpBvB,MAAOA,EACPG,aAAclB,KAAKR,MAAM0B,aACzBI,YAAatB,KAAKsB,cAEpB,kBAAC,EAAD,CACEpB,QAASF,KAAKR,MAAM8C,kBACpBpB,aAAclB,KAAKR,MAAM0B,aACzBI,YAAatB,KAAKsB,mB,GAjCTI,a,MCCnBqB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.309203d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nclass Header extends Component {\n  state = { navExpanded: false };\n  render() {\n    const navbarStyle = {\n      backgroundColor: \"#BBDEFB\",\n    };\n    const navbarTextStyle = {\n      color: \"white\",\n      fontSize: \"28px\",\n      fontFamily: \"'Merienda One', cursive\",\n    };\n    if (this.props.showNav) {\n      return (\n        <Navbar collapseOnSelect style={navbarStyle} expand=\"lg\">\n          <Navbar.Brand\n            style={navbarTextStyle}\n            href=\"https://leonatwork.github.io/dbms-notes/\"\n          >\n            DBMS Notes\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              {this.props.notes.map((note) => {\n                let className = \"list-group-item\";\n                if (note.id === this.props.activeNoteID)\n                  className += \" active-me\";\n                return (\n                  <Nav.Link\n                    key={note.id}\n                    href={\"#\" + note.id}\n                    className={className}\n                    onClick={() => this.props.handleClick(note.id)}\n                    style={{ cursor: \"pointer\", textAlign: \"center\" }}\n                  >\n                    {note.title}\n                  </Nav.Link>\n                );\n              })}\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      );\n    }\n    return (\n      <Navbar expand=\"lg\" style={navbarStyle}>\n        <Navbar.Brand\n          href=\"https://leonatwork.github.io/dbms-notes/\"\n          style={navbarTextStyle}\n        >\n          DBMS Notes\n        </Navbar.Brand>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nconst Index = ({ notes, activeNoteID, handleClick }) => {\n  return (\n    <ul className=\"list-group list-group-flush\">\n      {notes.map((note) => {\n        let className = \"list-group-item\";\n        if (note.id === activeNoteID) className += \" active\";\n        return (\n          <li\n            key={note.id}\n            className={className}\n            onClick={() => handleClick(note.id)}\n            style={{ cursor: \"pointer\" }}\n          >\n            {note.title}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\n\nconst Notes = ({ note }) => {\n  return <React.Fragment>{note}</React.Fragment>;\n};\n\nexport default Notes;\n","import React from \"react\";\n\nexport const notes = [\n  {\n    id: 0,\n    title: \"Introduction\",\n    content: (\n      <div>\n        <h1>Introduction</h1>\n        <hr />\n        <p>\n          <b>Database</b> is a collection of related data.\n        </p>\n        <p>\n          <b>DBMS (Database Management System) </b>\n          is the software used to create/manipulate/manage/update/delete\n          database\n        </p>\n        <p>\n          <b>Data</b> includes all the raw facts and figures\n        </p>\n        <p>\n          <b>Information</b> is the processed data\n        </p>\n\n        <p>\n          Data and information are subjective and the seperation depends on who\n          uses it and the situation.\n          <br /> <b>Eg.</b> A grocery list may be an information to the\n          customer, but it may just be a data to a market analyst.\n        </p>\n        <hr />\n        <h3>Why was DBMS developed?</h3>\n        <h6>Disadvantages of traditional file-system</h6>\n        <ul>\n          <li>Data redundancy</li>\n          <li>Data inconsistency</li>\n          <li>Access difficulty</li>\n          <li>Data isolation</li>\n          <li>Security problem</li>\n          <li>Atomicity problem</li>\n          <li>Concurrent access problem</li>\n          <li>Integrity issues</li>\n        </ul>\n        <hr />\n        <h3>Online Data Processing Systems</h3>\n        <h6>OLAP (Online Analytical Processing)</h6>\n        <ul>\n          <li>Consists of historical data</li>\n          <li>Subject oriented</li>\n          <li>Used for decision making</li>\n          <li>Larger in size (TB, PB)</li>\n          <li>Only Read operations</li>\n        </ul>\n        <h6>OLTP (Online Transaction Processing)</h6>\n        <ul>\n          <li>Consists of current data</li>\n          <li>Application oriented</li>\n          <li>Used for day to day operations</li>\n          <li>Smaller in size (MB, GB)</li>\n          <li>Both read and write operations</li>\n        </ul>\n      </div>\n    ),\n  },\n  {\n    id: 1,\n    title: \"ER diagram\",\n    content: (\n      <div>\n        <h1>ER diagram</h1>\n        <hr />\n        <h4>Entity Relationship Diagram</h4>\n        High level diagram giving a conceptual understanding of the relational\n        model (entities and their relationship)\n        <br />\n        Introduced by Peter Chen\n        <hr />\n        <h4>Entity</h4>\n        <b>Entity </b>\n        is a real world thing or object, distinguishable from others based on\n        its attributes. <br />\n        Types :\n        <ol>\n          <li>\n            Tangible : physically exist. <b>Eg.</b> bank locker, car\n          </li>\n          <li>\n            Intangible : exists logically. <b>Eg.</b> bank account\n          </li>\n        </ol>\n        <hr />\n        <h4>Attribute</h4>\n        <b>Attributes </b>are entity's characteristics. Represented with oval\n        (column)\n        <br />\n        Attribute types:\n        <ol>\n          <li>Simple : cannot be decomposed</li>\n          <li>\n            Composite : can be decomposed <b>Eg.</b> name = first name + last\n            name\n          </li>\n          <li>Single-valued</li>\n          <li>\n            Multi-valued (double oval) (we have to make separate table for it){\" \"}\n            <b>Eg.</b> phone no.\n          </li>\n          <li>Stored </li>\n          <li>\n            Derived (dotted oval) <b>Eg.</b> age can be derived from DOB\n          </li>\n        </ol>\n        <hr />\n        <h4>Relationship</h4>\n        <b>Relationship</b> is represented by a diamond\n        <br />A relationship has\n        <ol>\n          <li>Name</li>\n          <li>\n            Degree (no. of entites participating in the relation) (like unary,\n            binary, ternary, ..., n-ary)\n          </li>\n          <li>\n            Cardinality ratio / participation constraints (like one to one, one\n            to many) (for binary relations)\n          </li>\n        </ol>\n        <b>Cardinality ratio</b> express the number of entities to which an\n        entity can be related. <br />\n        It can be 1 : 1, 1 : n, n : 1 or n : n\n        <br />\n        <br />\n        <b>Participation constraints </b>specifies the maximum and minimum no.\n        of relationship an entity can/must participate in max cardinality and\n        min cardinality. <b>Eg.</b> 1 project can have min 3 employees and 1\n        project can have max 15 employees (min, max) = (3, 15)\n        <br />\n        partial participation - min cardinality = 0 (single line)\n        <br /> total participation - min cardinality {\">\"}= 1 (double line)\n        <hr />\n        <h4>Entity set</h4>\n        <b>Entity set </b>is the set of similar type of entities. Represented by\n        a rectangle in ER diagram (tables)\n        <br />\n        ER diagram represents entity set (student) and not the entity (Sam)\n        <br />\n        <br />\n        <b>Weak entity set </b>(double rectangle) is an entity that cannot be\n        uniquely identified by its attributes alone. The entity sets which do\n        not have sufficient attributes to form a primary key are known as weak\n        entity sets.\n        <br />\n        <br />\n        <b>Strong entity set </b>(simple rectangle) the entity sets which have a\n        primary key are known as strong entity sets.\n        <br />\n        The relation between one strong and one weak entity is represented by\n        double diamond. Weak entities always have total participation but strong\n        entities may not have total participation.\n      </div>\n    ),\n  },\n  {\n    id: 2,\n    title: \"Keys\",\n    content: (\n      <div>\n        <h1>Keys</h1>\n        <hr />\n        <p>\n          <b>Keys</b> are the attribute or set of attributes which can uniquely\n          identify a record.\n        </p>\n        <div>\n          <b>Types of keys</b>\n          <ul>\n            <li>\n              <b>Super key :</b> set of all possible keys\n            </li>\n            <li>\n              <b>Candidate key :</b> minimal subset of superkey which can\n              uniquely identify a record, i.e given a super key then no proper\n              subset of the super key should uniquely identify a record, then\n              that superkey is a candidate key\n            </li>\n            <li>\n              <b>Primary key :</b> the candidate key chosen to uniquely identify\n              a record\n            </li>\n            <li>\n              <b>Foreign key :</b> an attribute in table which is used to define\n              its relationship with another table\n            </li>\n            <li>\n              <b>Composite key :</b> key with more than one attribute (if one\n              attribute of composite key is foriegn key then it is called as{\" \"}\n              <b>compound key</b>)\n            </li>\n            <li>\n              <b>Alternate key :</b> candidate keys - primary key\n            </li>\n            <li>\n              <b>Surrogate key :</b> if no attribute or its combination can\n              uniquely identify a record then we introduce a new attribute\n              called surrogate key only for the identification purpose\n            </li>\n          </ul>\n        </div>\n      </div>\n    ),\n  },\n  {\n    id: 3,\n    title: \"Functional dependencies\",\n    content: (\n      <div>\n        <h1>Functional dependencies</h1>\n        <hr />\n        <div>\n          <b>f: a -{\">\"} b</b>\n          <p>\n            Given the value of <b>a</b>, we can uniquely determine the value of\n            <b> b</b>.\n          </p>\n          <p>\n            <b>Trivial functional dependency : </b>\n            <b>b</b> is a subset of\n            <b> a</b>.\n          </p>\n          <p>\n            <b>Non-trivial functional dependency : </b>\n            <b>b</b> is a NOT a subset of\n            <b> a</b>.\n          </p>\n          <p>\n            <b>Attribute closure</b> of an attribute set <b>A</b> can be defined\n            as a set of attributes which can be functionally determined from it.\n            It is denoted by\n            <b>\n              {\" \"}\n              F<sup>+</sup>.\n            </b>\n          </p>\n        </div>\n        <hr />\n        <div>\n          <h4>Armstrong axioms</h4>\n          <p>\n            Axioms are the rules which are considered true and used to derive\n            other results.\n          </p>\n          <b>Primary rules</b>\n          <ul>\n            <li>\n              <b>Reflexivity</b>\n              <p>If y is subset of x then x -{\">\"} y</p>\n            </li>\n            <li>\n              <b>Augmentation</b>\n              <p>\n                x -{\">\"} y then xz -{\">\"} yz\n              </p>\n            </li>\n            <li>\n              <b>Transitivity</b>\n              <p>\n                x -{\">\"} y and y -{\">\"} z then x -{\">\"} z\n              </p>\n            </li>\n          </ul>\n          <b>Secondary rules</b>\n          <ul>\n            <li>\n              <b>Union</b>\n              <p>\n                x -{\">\"} y and x -{\">\"} z then x -{\">\"} yz\n              </p>\n            </li>\n            <li>\n              <b>Decomposition</b>\n              <p>\n                x -{\">\"} yz then x -{\">\"} y and x -{\">\"} z\n              </p>\n            </li>\n            <li>\n              <b>Pseudo transitivity</b>\n              <p>\n                x -{\">\"} y and wy -{\">\"} z then xw -{\">\"} zz\n              </p>\n            </li>\n            <li>\n              <b>Composition</b>\n              <p>\n                x -{\">\"} y and z -{\">\"} w then xz -{\">\"} yw\n              </p>\n            </li>\n          </ul>\n        </div>\n        <hr />\n        <div>\n          <h4>Canonical form</h4>\n          <p>It is the irreducible set of functional dependencies.</p>\n          <b>Steps</b>\n          <ol>\n            <li>Decompose all dependencies</li>\n            <li>\n              For all the rules :\n              <ol>\n                <li>Find closure of the LHS of a rule</li>\n                <li>\n                  Find closure of the lhs of the same rule ignoring that rule\n                  itself\n                </li>\n                <li>\n                  If both closures are same then that rule is redundant so\n                  remove it otherwise include it\n                </li>\n              </ol>\n            </li>\n            <li>\n              For all the rules :\n              <ol>\n                <li>\n                  If LHS is compound then find its closure and closure of each\n                  subset of elements in it\n                </li>\n                <li>\n                  If closure of particular element matches the main closure then\n                  other elements on LHS are redundant\n                </li>\n              </ol>\n            </li>\n          </ol>\n          <p>\n            Finally the set of rules you have is the canonical form/canonical\n            cover/minimal cover/irreducible form.\n          </p>\n        </div>\n      </div>\n    ),\n  },\n  {\n    id: 4,\n    title: \"Normalization\",\n    content: (\n      <div>\n        <h1>Normalization</h1>\n        <hr />\n        <p>\n          <b>Normalization</b> is the method to organize data into multiple\n          related tables to avoid data redundancy.\n        </p>\n        <div>\n          <b>Redundancy issues</b>\n          <br />\n          Consider a table student table (roll no, name, branch name, HOD name,\n          HOD phone no)\n          <ul>\n            <li>\n              <b>Insertion anomaly</b>\n              <p>\n                Inserting redundant data (HOD info) for every new entry of a\n                student. Also new student record cannot be created if HOD\n                information is not available, even though both are logically\n                seperate entities.\n              </p>\n            </li>\n            <li>\n              <b>Deletion anomaly</b>\n              <p>\n                This happens when two separate items have the same table and we\n                wish to delete entry of one item and other also gets deleted.{\" \"}\n                <br />\n                <b>Eg.</b> If student info is deleted then HOD's info also gets\n                deleted.\n              </p>\n            </li>\n            <li>\n              <b>Updation anomaly</b>\n              <p>\n                If a value is updated then all its redundant copies needs to be\n                updated. <br />\n                <b>Eg. </b>If HOD phone no. is updated then for every student\n                entry we need to update it.\n              </p>\n            </li>\n          </ul>\n        </div>\n        <hr />\n        <h4>Normalization forms</h4>\n        <div>\n          <b>1 NF</b>\n          <ul>\n            <li>\n              Each column should contain atomic values (i.e each column has a\n              single value)\n            </li>\n            <li>A column should contain value of the same type</li>\n            <li>Each column should have a unique name</li>\n            <li>Order in which data is stored in table doesn't matter</li>\n          </ul>\n          <b>2 NF</b>\n          <ul>\n            <li>Table should be in 1 NF</li>\n            <li>\n              Table should not have any <b>partial dependencies</b> (partial\n              prime attr. -{\">\"} non prime attr.) i.e. if primary key of the\n              table is composition of more tham 1 columns and a particular\n              column of the table only depends on a subset of the primary key\n              columns and has nothing to do with other columns of the primary\n              key\n            </li>\n            <li>\n              While decomposing a table, we always make a seperate table for\n              candidate keys otherwise it will be a lossy decomposition.\n            </li>\n          </ul>\n          <b>3 NF</b>\n          <ul>\n            <li>Table should be in 2 NF</li>\n            <li>\n              Table should not have <b>transitive dependency</b> (non prime\n              attr. -{\">\"} non prime attr.) i.e. when there is an attribute in a\n              table which depends upon non-prime attribute which inturn depends\n              on the prime attributes\n            </li>\n          </ul>\n          <b>BCNF (Boyce Codd Normal Form - 3.5 NF)</b>\n          <ul>\n            <li>Table should be in 3 NF</li>\n            <li>\n              For any dependency A -{\">\"} B, A should be super key i.e no\n              dependencty of type (non prime attr -{\">\"} prime attr)\n            </li>\n            <li>\n              Conversions from 1 NF to 2 NF and 2 NF to 3 NF will not result in\n              any loss of functional dependencies. But conversion from 3 NF to\n              BCNF may sometimes result in functional dependency loss.\n              <br />\n              Decomposing R to R1 and R2 will be loss-less if :\n              <ul style={{ listStyleType: \"none\" }}>\n                <li>attr(R1) U attr(R2) = attr(R)</li>\n                <li>attr(R1) &#x2229; attr(R2) = &#934;</li>\n                <li>\n                  attr(R1) &#x2229; attr(R2) = key of (R1) or attr(R1) &#x2229;\n                  attr(RR2) = key of (R2)\n                </li>\n              </ul>\n            </li>\n          </ul>\n          <b>4 NF</b>\n          <ul>\n            <li>Table should be in BCNF</li>\n            <li>\n              Table should not have multi-valued dependency i.e. if A -{\">\"} B\n              then for a particular value of A there exists multiple values of B\n            </li>\n            <li>\n              For table to have multi-valued dependency it should have at least\n              3 columns (A,B,C) and B,C should be independent\n            </li>\n          </ul>\n          <b>5 NF (PJNF - Project Join Normal Form)</b>\n          <ul>\n            <li>Table should be in 4 NF</li>\n            <li>\n              Table should not have join dependency i.e. if decomposing a table\n              results in loss of information or creation of new info then don't\n              do it.\n            </li>\n          </ul>\n        </div>\n      </div>\n    ),\n  },\n  {\n    id: 5,\n    title: \"File structure & Indexing\",\n    content: (\n      <div>\n        <h1>File structure {\"&\"} Indexing</h1>\n        <hr />\n        <p>\n          DB Files are stored in blocks in secondary memory in contiguous or\n          non-contiguous manner.\n        </p>\n        <b>Sorted file</b>\n        <ul>\n          <li>Can be sorted only according to one attribute (search key)</li>\n          <li>Searching is fast (binary search)</li>\n          <li>Insertion and deletion will be hard</li>\n        </ul>\n        <b>Unsorted file</b>\n        <ul>\n          <li>Random order</li>\n          <li>Searching is slow</li>\n          <li>Insertion and deletion is easy</li>\n        </ul>\n        <b>Spanned mapping</b>\n        <ul>\n          <li>Internal fragmentation is avoided</li>\n          <li>\n            If space is left in a block after storing file then next file is\n            stored in this void partially\n          </li>\n        </ul>\n        <b>Unspanned mapping</b>\n        <ul>\n          <li>Internal fragmentation possible</li>\n          <li>File is put only if it fits the available space</li>\n        </ul>\n        <hr />\n        <h4>Indexing</h4>\n        <p>\n          To search a record in db file, first find the block in which the\n          record lies then find the record in that block. To speed up search we\n          maintain a separate index file. Index file is small hence search is\n          faster.\n          <br />\n          <b>Index file (search key, block pointer)</b>\n          <br />\n          index file is always sorted (binary search applied)\n          <br />\n          Blocking factor = no. of records in a block = floor(block size /\n          record size)\n        </p>\n        <p>\n          <b>Dense indexing :</b> index record is present for all records in the\n          main table. Sorted table not required\n          <br />\n          <b>Sparse indexing :</b> index record is present for selected records\n          of the main table. Sorted table required\n        </p>\n        <div>\n          <b>Types of Indexing</b>\n          <ol>\n            <li>\n              <b>Single level indexing</b>\n              <ol>\n                <li>\n                  Primary indexing\n                  <ul>\n                    <li>Search key is primary key</li>\n                    <li>File should be sorted on primary key</li>\n                    <li>Sparse indexing</li>\n                    <li>\n                      No. of index file entries = no. of blocks used by the main\n                      file\n                    </li>\n                    <li>No. of accesses log(n) + 1</li>\n                  </ul>\n                </li>\n                <li>\n                  Secondary indexing\n                  <ul>\n                    <li>Main file is not sorted</li>\n                    <li>Dense indexing</li>\n                    <li>Search key can be prime key or non key</li>\n                    <li>\n                      Different techniques to store block pointers used when\n                      search keys are duplicated\n                    </li>\n                    <li>Access time ceil(log(n)) + 1</li>\n                  </ul>\n                </li>\n                <li>\n                  Clustered indexing\n                  <ul>\n                    <li>\n                      Similar to primary indexing but main file is sorted on non\n                      primary key but the attribute to be searched is not\n                      primary key\n                    </li>\n                    <li>\n                      There will be one entry in the index for each unique value\n                    </li>\n                    <li>Access resuired {\">\"}= log(n) + 1</li>\n                    <li>\n                      It satisfies condition of both sparse and dense indexing\n                    </li>\n                  </ul>\n                </li>\n              </ol>\n            </li>\n            <li>\n              <b>Multi-level indexing</b>\n              <p>\n                If index is very large then we again split it to make multiple\n                levels of indexing i.e we make index of index to speed up the\n                search more.\n              </p>\n            </li>\n          </ol>\n        </div>\n      </div>\n    ),\n  },\n  {\n    id: 6,\n    title: \"Transactions\",\n    content: (\n      <div>\n        <h1>Transactions</h1>\n        <hr />\n        <p>\n          <b>Transaction </b>is a set of instruction which performs a logical\n          unit of work. They are atomic in nature, i.e if failure occur in the\n          mid then it needs to rollback again to the start.\n        </p>\n        <hr />\n        <div>\n          <h4>Transaction ACID properties</h4>\n          <ol>\n            <li>\n              <b>Atomicity</b>\n              <ul>\n                <li>\n                  Either all instructions of a transaction will run or none\n                </li>\n                <li>\n                  Transaction management component ensures atomicity in DBMS\n                </li>\n              </ul>\n            </li>\n            <li>\n              <b>Consistency</b>\n              <ul>\n                <li>\n                  If DB is consistent before transaction then it should remain\n                  consistent after transaction\n                </li>\n                <li>\n                  <b>Eg.</b> in case of account money transfer, total sum before\n                  and after the transfer should be same\n                </li>\n                <li>\n                  No separate component takes care of consistency, it is\n                  automatically achieved if transaction is atomic, durable and\n                  isolated\n                </li>\n              </ul>\n            </li>\n            <li>\n              <b>Isolation</b>\n              <ul>\n                <li>\n                  Transaction should be logically isolated i.e. transaction\n                  should not be affected by other transaction running\n                  concurrently\n                </li>\n                <li>\n                  Transaction should produce same result as if it is running\n                  alone in the absence of other transactions\n                </li>\n                <li>Concurrency control component ensures isolation in DBMS</li>\n              </ul>\n            </li>\n            <li>\n              <b>Durability</b>\n              <ul>\n                <li>\n                  Changes made by a successful transaction should be persistent\n                  in the system\n                </li>\n                <li>Recovery management component ensures durability</li>\n              </ul>\n            </li>\n          </ol>\n        </div>\n        <hr />\n        <div>\n          <h4>Transaction states</h4>\n          <ol>\n            <li>Active (executing stage)</li>\n            <li>Partially committed (result stored in local buffer)</li>\n            <li>Committed (result copied to main store)</li>\n            <li>\n              Terminated (final state) (system ready for next transaction)\n            </li>\n            <li>Failed (some error occured and we then roll back)</li>\n            <li>Aborted (reached from failed state after roll back)</li>\n          </ol>\n          <p>\n            Committed transactions cannot be rollbacked. We can run a new\n            transaction (compensating transaction) which undos the changed\n            value.\n          </p>\n        </div>\n      </div>\n    ),\n  },\n  {\n    id: 7,\n    title: \"Concurrency control\",\n    content: (\n      <div>\n        <h1>Concurrency control</h1>\n        <hr />\n        <div>\n          <b>Advantages of concurrency</b>\n          <ul>\n            <li>Less wait time</li>\n            <li>Less response time</li>\n            <li>More resource utilization</li>\n            <li>More efficiency</li>\n          </ul>\n          <p>\n            Concurrency does not mean two instructions are running parallely.\n            Transaction intructions are just interleaved.\n          </p>\n          <b>Disadvantages of concurrency</b>\n          <ul>\n            <li>\n              <b>Dirty read problem</b>\n              <ul>\n                <li>\n                  When a transaction reads an intermediate uncommitted value by\n                  some other transaction and treats it as a true value and\n                  commits to the main DB\n                </li>\n                <li>\n                  <b>Sol :</b> the reading transaction commits after the other\n                  transaction writing its value has committed\n                </li>\n              </ul>\n            </li>\n            <li>\n              <b>Unrepeatable read problem</b>\n              <ul>\n                <li>\n                  When a transaction reads a variable twice consecutively and\n                  gets different value each time because some other transaction\n                  has modified it in the time between.\n                </li>\n              </ul>\n            </li>\n            <li>\n              <b>Phantom read problem</b>\n              <ul>\n                <li>\n                  A transaction reads a variable, then another transaction\n                  deletes that variable and then again first transaction reads\n                  that variable and finds that the variable doesn't exist\n                </li>\n              </ul>\n            </li>\n            <li>\n              <b>Lost update problem (write-write conflict)</b>\n              <ul>\n                <li>\n                  A transaction reads and writes a variable then another\n                  transaction performs blind write (write without reading\n                  before) on that variable then commits, after that first\n                  transaction commits. So here changes made by the first\n                  transaction is lost.\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </div>\n        <hr />\n        <div>\n          <h4>Types of schedule</h4>\n          <ul>\n            <li>\n              <b>Serial schedule</b>\n              <ul>\n                <li>Transaction instructions are not interleaved</li>\n                <li>No context switching</li>\n              </ul>\n            </li>\n            <li>\n              <b>Non-serial schedule</b>\n              <ul>\n                <li>Transaction instructions are interleaved</li>\n                <li>Context switching happens</li>\n              </ul>\n            </li>\n            <li>\n              <b>Conflict serializable</b>\n              <ul>\n                <li>\n                  If we can make a non-serial schedule, serial by swapping\n                  instructions then that non-serial schedule is conflict\n                  serializable and is consistent. But if we cannot swap and make\n                  it serial then we cannot definitely say that it is\n                  inconsistent\n                </li>\n                <li>\n                  If we can swap instruction then they are non-conflicting\n                </li>\n                <li>\n                  When are instructions conflicting :\n                  <ol>\n                    <li>Instructions should be of different transactions</li>\n                    <li>\n                      If instruction are on different data items then they are\n                      non-conflicting\n                    </li>\n                    <li>RR on same data is non-conflicting</li>\n                    <li>WR on same data are conflicting</li>\n                    <li>WR on same data are conflicting</li>\n                    <li>WW on same data are conflicting</li>\n                  </ol>\n                </li>\n                <li>\n                  How to check for conflict serializability :\n                  <ul>\n                    <li>\n                      Draw graph\n                      <br />\n                      T1 -{\">\"} T2 (transaction T1 must happen before T2)\n                    </li>\n                    <li>\n                      If cycle present then it is not conflict serializable O(n\n                      <sup>2</sup>)\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li>\n              <b>View serializability</b>\n              <ul>\n                <li>Weaker form of consistency than conflict serializable</li>\n                <li>If schedule is CS then it will surely be VS</li>\n                <li>\n                  If a schedule is VS then we cannot say that it is surely CS\n                </li>\n                <li>\n                  If a schedule is not CS then for it to be VS it has to have at\n                  least 1 blind write\n                </li>\n                <li>\n                  To check for VS we have to check view equivalency of all\n                  permutations of transaction in a serial schedule with the\n                  given schedule\n                  <ul>\n                    <li>\n                      All initial reads on data item should be done by same\n                      transaction\n                    </li>\n                    <li>\n                      All final writes on data should be done by same\n                      transaction\n                    </li>\n                    <li>\n                      For all intermediate reads, the transaction should read\n                      the value written by same transaction in both the\n                      schedules\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li>\n              <b>Recoverable schedule</b>\n              <ul>\n                <li>\n                  Even if schedule is consistent a failure can make it\n                  inconsistent\n                </li>\n                <li>If dirty read is absent then it is recoverable</li>\n                <li>\n                  If dirty read present then the transaction doing the dirty\n                  read commits last then also its recoverable otherwise non\n                  recoverable\n                </li>\n                <p>\n                  <b>Cascading rollback :</b> when one transaction rollbacks and\n                  on seeing this, another dependent transaction starts to roll\n                  back and so on ...\n                </p>\n              </ul>\n            </li>\n            <li>\n              <b>Cascadeless schedule</b>\n              <ul>\n                <li>\n                  Transaction instantly commits before a dependent transaction\n                  performs a dirty read, hence dirty read is prevented and it\n                  becomes cascadeless\n                </li>\n                <li>This is more restrictive form of recoverable schedule</li>\n                <li>\n                  If transaction is cascadeless then it is surely recoverable\n                  but vice versa is not always true\n                </li>\n              </ul>\n            </li>\n            <li>\n              <b>Strict schedule</b>\n              <ul>\n                <li>\n                  If a transaction is performing write operation on a data item,\n                  then no other transaction can read or wire same data until\n                  first transaction has committed\n                </li>\n                <li>It is most restrictive</li>\n              </ul>\n            </li>\n          </ul>\n        </div>\n        <hr />\n        <div>\n          <h4>Concurrency control techniques</h4>\n          <div>\n            <ul>\n              <li>\n                <b>Time stamping protocols</b>\n                <div>\n                  <ul>\n                    <li>\n                      Timestamp of a transaction : each transaction is stamped\n                      with time which is unique to resolve conflict in case of\n                      concurrency issues.\n                    </li>\n                    <li>\n                      Timestamp TS(T<sub>i</sub>) of transaction i will be the\n                      value of the system clock when T<sub>i</sub> entered into\n                      the system\n                    </li>\n                    <li>\n                      If TS(T<sub>i</sub>) {\"<\"} TS(T<sub>j</sub>) then it is\n                      ensured that Ti runs before Tj Timestamp of data item\n                    </li>\n                    <li>\n                      Each data item q maintains two timestamp (read and write)\n                    </li>\n                    <li>\n                      R-timestamp(q) : largest timestamp of any transaction that\n                      executed read operation successfully\n                    </li>\n                    <li>\n                      W-timestamp(q) : largest timestamp of any transaction that\n                      executed write operation successfully\n                    </li>\n                    <li>\n                      T<sub>i</sub> requests for read(q)\n                    </li>\n                    <ul>\n                      <li>\n                        If TS(T<sub>i</sub>) {\"<\"} W.T.S(q) : Ti is rollbacked\n                      </li>\n                      <li>\n                        If TS(T<sub>i</sub>) {\">\"}= W.T.S(q) : T<sub>i</sub> is\n                        allowed and R.T.S(q) will be max(R.T.S(q), TS(T\n                        <sub>i</sub>))\n                      </li>\n                    </ul>\n                    <li>Ti requests for write(q)</li>\n                    <ul>\n                      <li>\n                        If TS(Ti) {\"<\"} R.T.S(q) : T<sub>i</sub> is rollbacked\n                      </li>\n                      <li>\n                        If TS(Ti) {\"<\"} W.T.S(q) : T<sub>i</sub> is rollbacked\n                      </li>\n                      <li>\n                        Else all condition T<sub>i</sub> is allowed and W.T.S(q)\n                        will be max(W.T.S(q), TS(T<sub>i</sub>))\n                      </li>\n                    </ul>\n                    <li>It ensures conflict serializability</li>\n                    <li>It ensures view serializability (obviously)</li>\n                    <li>\n                      Possibility of dirty read, no restrictions on commit,\n                      irrecoverable schedules and cascading rollbacks are\n                      possible\n                    </li>\n                    <li>\n                      No possibility of deadlock (because we only allow or\n                      reject , no wait)\n                    </li>\n                    <li>Slow</li>\n                    <li>May suffer from from timestamp</li>\n                    <li>\n                      Schedule generated by timestamp protocol is subset of\n                      conflict serializable schedule\n                    </li>\n                    <li>\n                      <b>Thomas write rule : </b>modify timestamp protocol to\n                      make some improvements and may generate those schedule\n                      that are VS but not CS and provides better concurrency\n                    </li>\n                    <li>\n                      It modifies timestamp protocol in obsolete write case when\n                      T<sub>i</sub> request write(q) if TS(T<sub>i</sub>){\"<\"}\n                      W.T.S(q)\n                    </li>\n                    <li>\n                      Here T<sub>i</sub> attempts to write an obsolete value of\n                      q. Rather than rolling back T<sub>i</sub>, the write\n                      operation is just ignored.\n                    </li>\n                  </ul>\n                </div>\n              </li>\n              <li>\n                <b>Lock based protocols</b>\n                <div>\n                  <ul>\n                    <li>\n                      Locking is done to achieve isolation and consistency\n                    </li>\n                    <li>\n                      lock -{\">\"} perform operation -{\">\"} unlock\n                    </li>\n                    <li>modes of locks</li>\n                    <ol>\n                      <li>\n                        <b>Shared mode Lock-S(x) : </b>transaction can perform\n                        read operation. Any other transaction can also acquire\n                        the same lock on the same data item at the same time\n                      </li>\n                      <li>\n                        <b>Exclusive mode Lock-X(x) : </b>transaction can\n                        perform both read and write operations. Any other cannot\n                        acquire read/exclusive lock at the same time\n                      </li>\n                    </ol>\n                    <li>\n                      If unlocking is not properly managed then inconsistency\n                      issues are possible. Hence we follow certain locking\n                      protocols\n                    </li>\n                    <ul>\n                      <li>\n                        <b>2 phase locking</b> (basic, conservative, strict,\n                        rigorous)\n                      </li>\n                      <ul>\n                        <li>transaction can have only 2 phases</li>\n                        <ol>\n                          <li>\n                            Growing phase : transaction can only acquire lock\n                            and cannot release it\n                          </li>\n                          <li>\n                            Shrinking phase : transaction can only release lock\n                            and cannot acquire\n                          </li>\n                        </ol>\n                        <li>W/R operation can be performed in both phases</li>\n                        <li>\n                          Ensures CS, the order of serializability is the order\n                          in which transaction reaches the lock point (when\n                          phase 1 ends and 2 begins)\n                        </li>\n                        <li>\n                          May generate irrecoverable schedule and cascading\n                          rollbacks\n                        </li>\n                        <li>May cause deadlock (waiting for locks)</li>\n                        <ul>\n                          <li>\n                            <b>Conservative 2PL</b>\n                          </li>\n                          <ul>\n                            <li>\n                              All locks are required for data items required at\n                              the start (lock point is the start point)\n                            </li>\n                            <li>\n                              If lock is not available then it will release\n                              acquired locks and wait and then start again later\n                            </li>\n                            <li>Free from deadlock</li>\n                            <li>\n                              Prior knowledge of what data item to be used\n                              required\n                            </li>\n                            <li>\n                              Possibility of irrecoverable schedule and\n                              cascading rollbacks (dirty read, commit issues)\n                            </li>\n                          </ul>\n                          <li>\n                            <b>Rigorous 2PL</b>\n                          </li>\n                          <ul>\n                            <li>\n                              Improvement to provide recoverable and cascadeless\n                              schedule (no dirty read, commit issues)\n                            </li>\n                            <li>\n                              All locks must be held till the end of transaction\n                            </li>\n                            <li>Only in the end all locks are released</li>\n                            <li>Lock point is the end of transaction</li>\n                            <li>\n                              Deadlock possible and inefficient because lock is\n                              held throughout strict 2PL\n                            </li>\n                          </ul>\n                          <li>\n                            <b>Strict 2PL</b>\n                          </li>\n                          <ul>\n                            <li>Improved version of rigorous 2PL</li>\n                            <li>\n                              In shrinking phase unlocking of exclusive locks\n                              are not allowed but shared locks are allowed\n                            </li>\n                            <li>\n                              All properties of rigorous 2PL + concurrency is\n                              improved\n                            </li>\n                          </ul>\n                        </ul>\n                      </ul>\n                      <li>\n                        <b>Graph based</b>\n                      </li>\n                      <ul>\n                        <li>\n                          Info. about the order in which db items will be\n                          accessed is required\n                        </li>\n                        <li>\n                          Partial ordering is imposed d<sub>i</sub>-{\">\"}d\n                          <sub>j</sub> (d<sub>i</sub> is accessed before d\n                          <sub>j</sub>)\n                        </li>\n                        <li>\n                          Set of all data items will be viewed as a DAG (aka db\n                          graph)\n                        </li>\n                        <li>Will only use exclusive mode locks</li>\n                        <li>Only considered rooted trees</li>\n                        <ul>\n                          <li>\n                            <b>Tree protocol</b>\n                            <ul>\n                              <li>\n                                A transaction T<sub>i</sub> may initially lock\n                                any data item\n                              </li>\n                              <li>\n                                Subsequently a data item q can be locked only if\n                                q's parent is locked by Ti\n                              </li>\n                              <li>Data item may be unlocked any time</li>\n                              <li>\n                                Data item locked and then unlocked by Ti cannot\n                                be relocked by Ti\n                              </li>\n                              <li>\n                                All schedules under this protocol are CS and VS\n                              </li>\n                              <li>\n                                Deadlock not possible but starvation possible\n                              </li>\n                              <li>\n                                Do not ensures recoverable and cascadeless-ness\n                                (it can be ensured by not unlocking before\n                                commit)\n                              </li>\n                              <li>\n                                Transaction may lock data item which it doesn't\n                                require\n                              </li>\n                            </ul>\n                          </li>\n                        </ul>\n                      </ul>\n                    </ul>\n                  </ul>\n                </div>\n              </li>\n              <li>Validation protocol</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    ),\n  },\n  {\n    id: 8,\n    title: \"Deadlocks\",\n    content: (\n      <div>\n        <h1>Deadlocks</h1>\n        <hr />\n        <p>Look OS Notes for intro</p>\n        <hr />\n        <h4>Dealing with deadlock problem</h4>\n        <ul>\n          <li>\n            <b>deadlock prevention</b>\n          </li>\n          <ul>\n            <li>To prevent hold and wait : use conservative-2PL</li>\n            <li>To prevent cyclic wait : use tree protocol</li>\n            <li>Wait and die approach (non preemptive)</li>\n            <ul>\n              <li>\n                T<sub>j</sub> has lock on Q. T<sub>i</sub> wants to acquire lock\n                on Q\n              </li>\n              <li>\n                If TS(T<sub>i</sub>) {\"<\"} TS(T<sub>j</sub>) -{\">\"} Ti must wait\n              </li>\n              <li>\n                If TS(T<sub>i</sub>) {\">\"} TS(T<sub>j</sub>) -{\">\"} T\n                <sub>i</sub> is rollbacked (die)\n              </li>\n              <li>\n                On rollback it retains its original time stamp otherwise it is\n                possible that it may never get a chance\n              </li>\n            </ul>\n            <li>Wound wait (preemptive)</li>\n            <ul>\n              <li>Tj has lock on Q. Ti wants to acquire lock on Q</li>\n              <li>\n                If TS(T<sub>i</sub>) {\">\"} TS(T<sub>j</sub>) -{\">\"} T\n                <sub>i</sub> must wait\n              </li>\n              <li>\n                If TS(T<sub>i</sub>) {\"<\"} TS(T<sub>j</sub>) -{\">\"} T\n                <sub>j</sub> is rollbacked\n              </li>\n            </ul>\n            <li>Lock timeouts</li>\n            <ul>\n              <li>Threshold time is set for a transaction to acquire lock</li>\n              <li>\n                If lock is not obtained within time, then it is rollbacked\n              </li>\n            </ul>\n          </ul>\n          <li>\n            <b>Detection and recovery</b>\n          </li>\n        </ul>\n        <hr />\n        <p>\n          <sup>*</sup>OS Notes cover deadlock in more detail\n        </p>\n      </div>\n    ),\n  },\n  {\n    id: 9,\n    title: \"SQL\",\n    content: (\n      <div>\n        <h1>SQL (Structured Query Language)</h1>\n        <hr />\n        <div>\n          <b>SQL</b> is a standard language for relational database management\n          systems\n          <ul>\n            <li>SQL is domain specific</li>\n            <li>SQL is not case sensitive</li>\n          </ul>\n          <b>DDL : </b>data definition language\n          <br />\n          <b>DML : </b>data manipulation language\n          <br />\n          <b>TCL : </b>transaction control language\n          <br />\n        </div>\n        <hr />\n        <div>\n          <h4>General Query Syntax</h4>\n          <p>\n            SELECT attributes\n            <br /> FROM table_name\n            <br /> WHERE condition\n          </p>\n        </div>\n        <hr />\n        <div>\n          <h4>Cross table queries</h4>\n          <b>Cartesian product </b>(every row in table-1 is associated to every\n          row in table-2)\n          <p>\n            SELECT ...\n            <br />\n            FROM table1, table2\n            <br />\n            WHERE table1.id = table2.id\n          </p>\n          <b>Joins</b> (improved version of cartesian product)\n          <ul>\n            <li>\n              <b>Natural join</b>\n              <br />\n              Considers same value of common attribute in 2 tables for matching\n            </li>\n            <p>\n              SELECT ...\n              <br />\n              FROM table1 NATURAL JOIN table2\n              <br />\n              WHERE ...\n            </p>\n            <li>\n              <b>Join/Inner join</b>\n              <br />\n              Inner join or just join, both are same\n            </li>\n            <ul>\n              <li>Join based on an attribute</li>\n              <p>\n                SELECT ...\n                <br />\n                FROM table1 JOIN table2 using (id)\n              </p>\n              <li>Join based on condition</li>\n              <p>\n                SELECT ...\n                <br />\n                FROM table1 JOIN table2 on table1.id = table2.id\n              </p>\n            </ul>\n            <li>\n              <b>Outer join</b>\n              <br />\n              Problem of data loss in above joins (unmatched columns)\n              <ul>\n                <li>\n                  <b>Left outer join :</b> full left table and matching of right\n                  table others NULL\n                </li>\n                <li>\n                  <b>Right outer join :</b> full right table and matching of\n                  left table others NULL\n                </li>\n                <li>\n                  <b>Full outer join :</b> full table with NULL in unmatched\n                </li>\n              </ul>\n            </li>\n          </ul>\n          <b>UNION, INTERSECT, MINUS/EXCEPT</b>\n          <ul>\n            <p>\n              SELECT ...\n              <br />\n              FROM ...\n              <br />\n              UNION / INTERSECT / MINUS / EXCEPT\n              <br />\n              SELECT ...\n              <br />\n              FROM ...\n            </p>\n            <li>\n              For using it in queries, both tables should have same no. and\n              types of columns.\n            </li>\n            <li>\n              Union, intersect and minus/except automatically remove duplicate\n              records.\n            </li>\n            <li>\n              For keeping duplicate records use UNION ALL instead of UNION and\n              likewise ...\n            </li>\n          </ul>\n        </div>\n        <hr />\n        <div>\n          <h4>String Operations</h4>\n\n          <p>\n            LIKE (like is case sensitive)\n            <br />\n            '_' - character\n            <br />\n            '%' - substring\n            <br />\n            WHERE name LIKE '%das'\n            <br />\n            WHERE name LIKE '_oel'\n          </p>\n        </div>\n        <hr />\n        <div>\n          <h4>Miscellaneous</h4>\n          <p>\n            <b>Sorting by two attributes</b>\n            <br />\n            SELECT ID, CompanyName, City, Country\n            <br />\n            FROM Supplier\n            <br />\n            WHERE Country IN ('USA', 'Japan', 'Germany')\n            <br />\n            ORDER BY Country ASC, CompanyName DESC\n          </p>\n          <p>\n            <b>Where conditions</b>\n            <br />\n            WHERE condition ({\"<>\"} not equal) (balance between 10 and 100)\n          </p>\n        </div>\n        <hr />\n        <div>\n          <h4>NoSQL vs. SQL</h4>\n          <b>NoSQL (not only SQL)</b>\n          <ul>\n            <li>Flexible</li>\n            <li>Fast</li>\n            <li>Scalable</li>\n            <li>Suitable for large volume of data</li>\n            <li>Designed to scale out (more number of nodes)</li>\n          </ul>\n          <b>SQL</b>\n          <ul>\n            <li>Rigid</li>\n            <li>Designed to scale up (bigger size of nodes)</li>\n            <li>Suitable for structured data</li>\n          </ul>\n          <b>SQL is better when :</b>\n          <ul>\n            <li>Working with complex queries</li>\n            <li>ACID compliance</li>\n            <li>Less chance of changes or growth</li>\n          </ul>\n          <b>NoSQL is better when :</b>\n          <ul>\n            <li>Constantly there is change data, schema or data type</li>\n            <li>There is large volume of data</li>\n          </ul>\n        </div>\n      </div>\n    ),\n  },\n];\n","import React from \"react\";\nimport Index from \"./index\";\nimport Notes from \"./notes\";\nimport { notes } from \"../data/notes-object\";\n\nconst Content = ({ activeNoteID, showNav, handleClick }) => {\n  return (\n    <div\n      className=\"row\"\n      style={{ width: \"80%\", margin: \"0 auto\", paddingTop: \"15px\" }}\n    >\n      {!showNav && (\n        <div className=\"col-3\" style={{ borderRight: \"1px solid #eee\" }}>\n          <Index\n            notes={notes}\n            activeNoteID={activeNoteID}\n            handleClick={handleClick}\n          />\n        </div>\n      )}\n      <div className=\"col\">\n        <Notes note={notes[activeNoteID].content} />\n      </div>\n    </div>\n  );\n};\n\nexport default Content;\n","import React, { Component } from \"react\";\nimport Header from \"./header\";\nimport Content from \"./content\";\nimport { notes } from \"../data/notes-object\";\n\nclass Main extends Component {\n  state = { showResponsiveNav: false, activeNoteID: 0 };\n  resize() {\n    let currentShowNav = window.innerWidth < 950;\n    if (currentShowNav !== this.state.showNav) {\n      this.setState({ showResponsiveNav: currentShowNav });\n    }\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  handleClick = (id) => {\n    this.setState({ activeNoteID: id });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header\n          showNav={this.state.showResponsiveNav}\n          notes={notes}\n          activeNoteID={this.state.activeNoteID}\n          handleClick={this.handleClick}\n        />\n        <Content\n          showNav={this.state.showResponsiveNav}\n          activeNoteID={this.state.activeNoteID}\n          handleClick={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Main from \"./components/main\";\nimport \"./style.css\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n"],"sourceRoot":""}