{"version":3,"sources":["components/header.jsx","components/index.jsx","components/notes.jsx","data/notes-object.js","components/content.jsx","index.js"],"names":["Header","className","Index","state","this","props","notes","map","note","id","activeNoteID","key","onClick","handleClick","style","cursor","title","Component","Notes","Fragment","content","Content","setState","ReactDOM","render","width","margin","document","getElementById"],"mappings":"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","file":"static/js/main.8d802fbc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst Header = () => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <span className=\"navbar-brand mb-0 h1\">DBMS Notes</span>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Index extends Component {\n  state = {};\n  render() {\n    return (\n      <ul className=\"list-group list-group-flush\">\n        {this.props.notes.map((note) => {\n          let className = \"list-group-item\";\n          if (note.id === this.props.activeNoteID) className += \" active\";\n          return (\n            <li\n              key={note.id}\n              className={className}\n              onClick={() => this.props.handleClick(note.id)}\n              style={{ cursor: \"pointer\" }}\n            >\n              {note.title}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default Index;\n","import React, { Component } from \"react\";\n\nclass Notes extends Component {\n  state = {};\n  render() {\n    return <React.Fragment>{this.props.note}</React.Fragment>;\n  }\n}\n\nexport default Notes;\n","import React from \"react\";\n\nexport const notes = [\n  {\n    id: 0,\n    title: \"Introduction\",\n    content: (\n      <div>\n        <h1>Introduction</h1>\n        <hr />\n        <p>\n          <b>Database</b> is a collection of related data.\n        </p>\n        <p>\n          <b>DBMS (Database Management System) </b>\n          is the software used to create/manipulate/manage/update/delete\n          database\n        </p>\n        <p>\n          <b>Data</b> includes all the raw facts and figures\n        </p>\n        <p>\n          <b>Information</b> is the processed data\n        </p>\n\n        <p>\n          Data and information are subjective and the seperation depends on who\n          uses it and the situation.\n          <br /> <b>Eg.</b> A grocery list may be an information to the\n          customer, but it may just be a data to a market analyst.\n        </p>\n        <hr />\n        <h3>Why was DBMS developed?</h3>\n        <h6>Disadvantages of traditional file-system</h6>\n        <ul>\n          <li>Data redundancy</li>\n          <li>Data inconsistency</li>\n          <li>Access difficulty</li>\n          <li>Data isolation</li>\n          <li>Security problem</li>\n          <li>Atomicity problem</li>\n          <li>Concurrent access problem</li>\n          <li>Integrity issues</li>\n        </ul>\n        <hr />\n        <h3>Online Data Processing Systems</h3>\n        <h6>OLAP (Online Analytical Processing)</h6>\n        <ul>\n          <li>Consists of historical data</li>\n          <li>Subject oriented</li>\n          <li>Used for decision making</li>\n          <li>Larger in size (TB, PB)</li>\n          <li>Only Read operations</li>\n        </ul>\n        <h6>OLTP (Online Transaction Processing)</h6>\n        <ul>\n          <li>Consists of current data</li>\n          <li>Application oriented</li>\n          <li>Used for day to day operations</li>\n          <li>Smaller in size (MB, GB)</li>\n          <li>Both read and write operations</li>\n        </ul>\n      </div>\n    ),\n  },\n  {\n    id: 1,\n    title: \"ER diagram\",\n    content: (\n      <div>\n        <h1>ER diagram</h1>\n        <hr />\n        <h4>Entity Relationship Diagram</h4>\n        High level diagram giving a conceptual understanding of the relational\n        model (entities and their relationship)\n        <br />\n        Introduced by Peter Chen\n        <hr />\n        <h4>Entity</h4>\n        <b>Entity </b>\n        is a real world thing or object, distinguishable from others based on\n        its attributes. <br />\n        Types :\n        <ol>\n          <li>\n            Tangible : physically exist. <b>Eg.</b> bank locker, car\n          </li>\n          <li>\n            Intangible : exists logically. <b>Eg.</b> bank account\n          </li>\n        </ol>\n        <hr />\n        <h4>Attribute</h4>\n        <b>Attributes </b>are entity's characteristics. Represented with oval\n        (column)\n        <br />\n        Attribute types:\n        <ol>\n          <li>Simple : cannot be decomposed</li>\n          <li>\n            Composite : can be decomposed <b>Eg.</b> name = first name + last\n            name\n          </li>\n          <li>Single-valued</li>\n          <li>\n            Multi-valued (double oval) (we have to make separate table for it){\" \"}\n            <b>Eg.</b> phone no.\n          </li>\n          <li>Stored </li>\n          <li>\n            Derived (dotted oval) <b>Eg.</b> age can be derived from DOB\n          </li>\n        </ol>\n        <hr />\n        <h4>Relationship</h4>\n        <b>Relationship</b> is represented by a diamond\n        <br />A relationship has\n        <ol>\n          <li>Name</li>\n          <li>\n            Degree (no. of entites participating in the relation) (like unary,\n            binary, ternary, ..., n-ary)\n          </li>\n          <li>\n            Cardinality ratio / participation constraints (like one to one, one\n            to many) (for binary relations)\n          </li>\n        </ol>\n        <b>Cardinality ratio</b> express the number of entities to which an\n        entity can be related. <br />\n        It can be 1 : 1, 1 : n, n : 1 or n : n\n        <br />\n        <br />\n        <b>Participation constraints </b>specifies the maximum and minimum no.\n        of relationship an entity can/must participate in max cardinality and\n        min cardinality. <b>Eg.</b> 1 project can have min 3 employees and 1\n        project can have max 15 employees (min, max) = (3, 15)\n        <br />\n        partial participation - min cardinality = 0 (single line)\n        <br /> total participation - min cardinality {\">\"}= 1 (double line)\n        <hr />\n        <h4>Entity set</h4>\n        <b>Entity set </b>is the set of similar type of entities. Represented by\n        a rectangle in ER diagram (tables)\n        <br />\n        ER diagram represents entity set (student) and not the entity (Sam)\n        <br />\n        <br />\n        <b>Weak entity set </b>(double rectangle) is an entity that cannot be\n        uniquely identified by its attributes alone. The entity sets which do\n        not have sufficient attributes to form a primary key are known as weak\n        entity sets.\n        <br />\n        <br />\n        <b>Strong entity set </b>(simple rectangle) the entity sets which have a\n        primary key are known as strong entity sets.\n        <br />\n        The relation between one strong and one weak entity is represented by\n        double diamond. Weak entities always have total participation but strong\n        entities may not have total participation.\n      </div>\n    ),\n  },\n  {\n    id: 2,\n    title: \"Keys\",\n    content: (\n      <div>\n        <h1>Keys</h1>\n        <hr />\n        <p>\n          <b>Keys</b> are the attribute or set of attributes which can uniquely\n          identify a record.\n        </p>\n        <div>\n          <b>Types of keys</b>\n          <ul>\n            <li>\n              <b>Super key :</b> set of all possible keys\n            </li>\n            <li>\n              <b>Candidate key :</b> minimal subset of superkey which can\n              uniquely identify a record, i.e given a super key then no proper\n              subset of the super key should uniquely identify a record, then\n              that superkey is a candidate key\n            </li>\n            <li>\n              <b>Primary key :</b> the candidate key chosen to uniquely identify\n              a record\n            </li>\n            <li>\n              <b>foriegn key :</b> an attribute in table which is used to define\n              its relationship with another table\n            </li>\n            <li>\n              <b>Composite key :</b> key with more than one attribute (if one\n              attribute of composite key is foriegn key then it is called as{\" \"}\n              <b>compound key</b>)\n            </li>\n            <li>\n              <b>Alternate key :</b> candidate keys - primary key\n            </li>\n            <li>\n              <b>Surrogate key :</b> if no attribute or its combination can\n              uniquely identify a record then we introduce a new attribute\n              called surrogate key only for the identification purpose\n            </li>\n          </ul>\n        </div>\n      </div>\n    ),\n  },\n  {\n    id: 3,\n    title: \"Functional dependencies\",\n    content:\n      \"3 Lorem ipsum dolor sit amet consectetur, adipisicing elit. Vitaedoloremque delectus harum consectetur blanditiis iste dignissimos eligendi sequi esse sit illo quaerat aut maxime, laborum soluta tempore exercitationem magni dolorem!\",\n  },\n  {\n    id: 4,\n    title: \"Title 4\",\n    content:\n      \"4 Lorem ipsum dolor sit amet consectetur, adipisicing elit. Vitaedoloremque delectus harum consectetur blanditiis iste dignissimos eligendi sequi esse sit illo quaerat aut maxime, laborum soluta tempore exercitationem magni dolorem!\",\n  },\n];\n","import React, { Component } from \"react\";\nimport Index from \"./index\";\nimport Notes from \"./notes\";\nimport { notes } from \"../data/notes-object\";\n\nclass Content extends Component {\n  state = {\n    activeNoteID: 0,\n  };\n\n  handleClick = (id) => {\n    this.setState({ activeNoteID: id });\n  };\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <Index\n            notes={notes}\n            activeNoteID={this.state.activeNoteID}\n            handleClick={this.handleClick}\n          />\n        </div>\n        <div className=\"col\">\n          <Notes note={notes[this.state.activeNoteID].content} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Content;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Header from \"./components/header\";\nimport Content from \"./components/content\";\n\nReactDOM.render(\n  <React.Fragment>\n    <div style={{ width: \"80%\", margin: \"0 auto\" }}>\n      <Header />\n      <Content />\n    </div>\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}